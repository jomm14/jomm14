import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';

void main() {
  runApp(FlappyBirdApp());
}

class FlappyBirdApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: FlappyBirdGame(),
    );
  }
}

class FlappyBirdGame extends StatefulWidget {
  @override
  _FlappyBirdGameState createState() => _FlappyBirdGameState();
}

class _FlappyBirdGameState extends State<FlappyBirdGame> {
  static const double gravity = 1.8;
  static const double jumpForce = -20;
  static const double gapHeight = 200;
  static const double initialPipePosition = 2.0;
  static const double pipeSpeed = 2.0;

  double birdY = 0;
  double birdVelocity = 0;
  double pipeX = 1.5;
  double score = 0;
  bool isGameover = false;
  Random random = Random();
  Timer? timer;

  @override
  void initState() {
    super.initState();
    resetGame();
    startGame();
  }

  void resetGame() {
    setState(() {
      birdY = 0;
      birdVelocity = 0;
      pipeX = 1.5;
      score = 0;
      isGameover = false;
    });
  }

  void startGame() {
    timer = Timer.periodic(Duration(milliseconds: 60), (Timer timer) {
      setState(() {
        if (isGameover) {
          timer.cancel();
        }
        updateBird();
        updatePipes();
        checkCollision();
        updateScore();
      });
    });
  }

  void updateBird() {
    setState(() {
      birdVelocity += gravity;
      birdY += birdVelocity;
    });
  }

  void jumpBird() {
    setState(() {
      birdVelocity = jumpForce;
    });
  }

  void updatePipes() {
    setState(() {
      pipeX -= pipeSpeed;
      if (pipeX <= -1.5) {
        pipeX += 3;
        score += 0.5;
      }
    });
  }

  void checkCollision() {
    if (birdY > 1 || birdY < -1) {
      endGame();
    }
    if (pipeX <= -0.25 && pipeX >= -0.75) {
      if (birdY < -0.75 || birdY > 0.75) {
        endGame();
      }
    }
  }

  void updateScore() {
    setState(() {
      score += 0.01;
    });
  }

  void endGame() {
    setState(() {
      isGameover = true;
    });
  }

  @override
  void dispose() {
    timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
        title: Text('Flappy Bird'),
    ),
    body: GestureDetector(
    onTap: isGameover ? resetGame : jumpBird,
    child: Container(
    color: Colors.blue,
    child: Column(
    children: [
    Expanded(
    flex: 2,
    child: Container(
    child: Center(
    child: isGameover
    ? Text(
    'Game Over',
    style: TextStyle(
    fontSize: 40,
    fontWeight: FontWeight.bold,
    color: Colors.white,
    ),
    )
        : null,
    ),
    ),
    ),
    Expanded
    (
      flex: 6,
      child: Container(
        child: Stack(
          children: [
            AnimatedContainer(
              duration: Duration(milliseconds: 0),
              alignment: Alignment(0, birdY),
              child: Image.asset(
                'assets/bird.png',
                width: 80,
                height: 80,
              ),
            ),
            AnimatedContainer(
              duration: Duration(milliseconds: 0),
              alignment: Alignment(pipeX, -1),
              child: Image.asset(
                'assets/pipe_top.png',
                width: 100,
                height: 500,
              ),
            ),
            AnimatedContainer(
              duration: Duration(milliseconds: 0),
              alignment: Alignment(pipeX, 1),
              child: Image.asset(
                'assets/pipe_bottom.png',
                width: 100,
                height: 500,
              ),
            ),
          ],
        ),
      ),
    ),
      Expanded(
        flex: 2,
        child: Container(
          color: Colors.green,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Score: ${score.toStringAsFixed(0)}',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ],
          ),
        ),
      ),
    ],
    ),
    ),
    ),
    );
  }
}
