include \masm32\include\masm32rt.inc        ;the library 

.data                                       ;declaration of the variable 
                                            
    msg1 db "Enter String: ",0              
    msg2 db "The String You Enter is: ",0   
    input1 db 50 dup(?)                     
                                                         
.code
                                    
start:
 
    push offset msg1                ;getting the msg1 and store
    call StdOut                     ;print   

    push 50                         ;storing 50 bits less or more bits
    push offset input1              ;getting the input
    call StdIn                                
    
    
    mov esi, offset input1         ;move or put the value into esi
    mov ecx, LENGTHOF input1       ; input1.length            
                                   
    loops:                         ;this is the Label section 
        cmp ecx, 0                 ;    if(ecx == 0) 
        je exitx                   ;exitLoop(jump if equal) kapag yung counter ay na ritch yung zero na value doon na sya mageexit (exitx) 
        

        mov al, [esi]              ;[] it use the contents of the operand as an address not the register itself
                                  
        cmp al, 65d                ;if(al < 'A' == 65d)
        jb incre                   ;Goto   jb(jump below)incre
        
        cmp al, 90d                ;if(al < 'Z' == 90d)
        jb LowerC                  ;Goto 

        cmp al, 122d               ;if(al < 122d == 'z')
        ja incre                   ;ja(jump if Above) Upper
        
        cmp al, 97d                ;if( al < 96d == 'a')
        ja UpperC                  ;Goto
        
     incre:
        inc esi                     ;increase the operand by 1
        dec ecx                     ;decrease the operand by 1
        jmp loops                   ;back to the loops

    LowerC:
        add al, 20h                 ;adding 20h(hexa) into al uppercase value
        mov [esi], al               ;Send the byte back to where it came from
        jmp incre                   ;back to incre loop and continue loop
        
    UpperC:
        sub al, 20h                 ;subtracting 20h into al uppercase value
        mov [esi], al               ;Send the byte back to where it came from
        jmp incre

    
 exitx:
    push offset msg2
    call StdOut                     ;calling the variable string msg2
    push offset input1  
    call StdOut                     ;display the input1
    
end start