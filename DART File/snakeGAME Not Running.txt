import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import 'dart:math';
import 'dart:async';
import 'package:flutter/services.dart';

void main() {
  runApp(SnakeGameApp());
}

class SnakeGameApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: SnakeGame(),
    );
  }
}

class SnakeGame extends StatefulWidget {
  @override
  _SnakeGameState createState() => _SnakeGameState();
}

class _SnakeGameState extends State<SnakeGame> {
  static final int gridSize = 20;
  static final int snakeSize = 3;
  static final int initSpeed = 300;

  Direction direction = Direction.right;
  List<Point<int>> snake = [];
  Point<int> food = Point(0, 0);
  int score = 0;
  int speed = initSpeed;
  bool isGameover = false;
  Random random = Random();
  late Timer timer;

  @override
  void initState() {
    super.initState();
    resetGame();
    startGame();
  }

  void resetGame() {
    setState(() {
      snake.clear();
      for (int i = 0; i < snakeSize; i++) {
        snake.add(Point(i, 0));
      }
      placeFood();
      direction = Direction.right;
      score = 0;
      speed = initSpeed;
      isGameover = false;
    });
  }

  void startGame() {
    timer = Timer.periodic(Duration(milliseconds: speed), (Timer timer) {
      setState(() {
        moveSnake();
        checkCollision();
      });
    });
  }

  void moveSnake() {
    final head = snake.first;
    final Point<int> delta = getDelta(direction);
    final Point<int> newHead = Point(
      (head.x + delta.x) % gridSize,
      (head.y + delta.y) % gridSize,
    );
    snake.insert(0, newHead);
    if (snake.length > snakeSize) {
      snake.removeLast();
    }
  }

  void checkCollision() {
    final head = snake.first;
    if (head == food) {
      score++;
      placeFood();
      if (speed > 50) {
        speed -= 10;
      }
    } else {
      for (int i = 1; i < snake.length; i++) {
        if (snake[i] == head) {
          endGame();
          break;
        }
      }
    }
  }

  void endGame() {
    timer.cancel();
    setState(() {
      isGameover = true;
    });
  }

  void placeFood() {
    final x = random.nextInt(gridSize);
    final y = random.nextInt(gridSize);
    final newFood = Point(x, y);
    if (snake.contains(newFood)) {
      placeFood();
    } else {
      food = newFood;
    }
  }

  void handleGesture(DragUpdateDetails details) {
    final dx = details.delta.dx;
    final dy = details.delta.dy;
    if (dx.abs() > dy.abs()) {
      if (dx > 0 && direction != Direction.left) {
        direction = Direction.right;
      } else if (dx < 0 && direction != Direction.right) {
        direction = Direction.left;
      }
    } else {
      if (dy > 0 && direction != Direction.up) {
        direction = Direction.down;
      } else if (dy < 0 && direction != Direction.down) {
        direction = Direction.up;
      }
    }
  }

  void handleKeyDown(RawKeyEvent event) {
    if (event is RawKeyDownEvent) {
      if (event.logicalKey == LogicalKeyboardKey.arrowUp &&
          direction != Direction.down) {
        direction = Direction.up;
      } else if (event.logicalKey == LogicalKeyboardKey.arrowDown &&
          direction != Direction.up) {
        direction = Direction.down;
      } else if (event.logicalKey == LogicalKeyboardKey.arrowLeft &&
          direction != Direction.right) {
        direction = Direction.left;
      } else if (event.logicalKey == LogicalKeyboardKey.arrowRight &&
          direction != Direction.left) {
        direction = Direction.right;
      }
    }
  }

  Widget buildGrid() {
    return GridView.builder(
      itemCount: gridSize * gridSize,
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: gridSize,
      ),
      itemBuilder: (BuildContext context, int index) {
        final x = index % gridSize;
        final y = index ~/ gridSize;
        Point<int> point = Point(x, y);
        bool isSnake = snake.contains(point);
        bool isFood = (food == point);

        return Container(
          decoration: BoxDecoration(
            color: isSnake ? Colors.green : (isFood ? Colors.red : Colors.grey),
            border: Border.all(color: Colors.black),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Snake Game'),
      ),
      body: RawKeyboardListener(
        focusNode: FocusNode(),
        onKey: handleKeyDown,
        child: GestureDetector(
          onHorizontalDragUpdate: (DragUpdateDetails details) =>
              handleGesture(details),
          onVerticalDragUpdate: (DragUpdateDetails details) =>
              handleGesture(details),
          child: Column(
            children: [
              Expanded(
                child: Center(
                  child: isGameover
                      ? Text(
                    'Game Over',
                    style: TextStyle(fontSize: 30),
                  )
                      : buildGrid(),
                ),
              ),
              Container(
                padding: EdgeInsets.symmetric(vertical: 10),
                color: Colors.black,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Score: $score',
                      style: TextStyle(color: Colors.white, fontSize: 20),
                    ),
                    SizedBox(width: 30),
                    ElevatedButton(
                      onPressed: isGameover ? resetGame : null,
                      child: Text(isGameover ? 'Restart' : 'Playing'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

enum Direction { up, down, left, right }

Point<int> getDelta(Direction direction) {
  switch (direction) {
    case Direction.up:
      return Point(0, -1);
    case Direction.down:
      return Point(0, 1);
    case Direction.left:
      return Point(-1, 0);
    case Direction.right:
      return Point(1, 0);
    default:
      return Point(0, 0);
  }
}
