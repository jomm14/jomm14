include \masm32\include\masm32rt.inc

.data
  ;------------------------ VARIABLE -----------
    input1 db 20 dup (?)
    UorLInput db 10 dup (?)
    Msg1 db 20 dup (?)
    errorMsg1 db "Invalid Input", 0

.code

    main:
     ;----------GetCL is the Inputed value in the Command Line-----
        invoke GetCL, 1, offset input1                        
        invoke GetCL, 2, offset UorLInput        
        invoke StrLen, offset UorLInput                  ;getting the length of UorLInput
        cmp eax, 2d                                 ;compare eax to 2d == STX which is for storing 
        jne errorMsg                                ;jump not equal errorMsg

        invoke GetCL, 3, offset Msg1
        invoke StrLen, offset Msg1
        cmp eax, 0
        jne errorMsg
       
        
        mov esi, offset UorLInput                        ;temporary store UorLInput to esi
        cmp byte ptr[esi], '-'                      ;cmp if the value of esi is '-'
        je checker                                  ;jump equal to checker
        cmp byte ptr[esi], '/'                      ;cmp if the value of esi is '/'
        jne errorMsg                                ;if not jump to errorMsg
        
    checker:
    ;-------------------Upper or Lower CASE ----------
        cmp byte ptr[esi+1], 'u'
        je convU
        cmp byte ptr[esi+1], 'U'
        je convU
        cmp byte ptr[esi+1], 'l'
        je convL
        cmp byte ptr[esi+1], 'L'
        je convL

        jmp errorMsg                              ;jump to errorMsg 
        
;-------------UPPERCASE---------
    convU:
        invoke StrLen, offset input1
        mov esi, offset input1
        mov ecx, eax
        
    convUloop:
        cmp byte ptr[esi], 'a'
        jb counter1
        cmp byte ptr[esi], 'z'
        ja counter1
        sub byte ptr[esi], 32d
;----------------COUNTER OR A LOOP----------
    counter1:
        inc esi
        loop convUloop

        jmp printss
 ;------------------LOWERCASE--------------               
    convL:
        invoke StrLen, offset input1
        mov esi, offset input1
        mov ecx, eax
        
    convLloop:
        cmp byte ptr[esi], 'A'
        jb counter2
        cmp byte ptr[esi], 'Z'
        ja counter2
        add byte ptr[esi], 32d
;-------------2ND COUNTER OR A LOOP--------------
    counter2:
        inc esi
        loop convLloop

        jmp printss                                             ;jump to printss
        

        errorMsg:                                               ;PRINT ERROR MESSAGE
            invoke StdOut, offset errorMsg1
            jmp finish
            
        printss:
            invoke StdOut, offset input1                         ;PRINT THE arg1
            jmp finish

finish:

end main